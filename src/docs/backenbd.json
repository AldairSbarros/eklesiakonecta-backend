/* =====================================================
 EKKLESIA BACKEND â€” ESTRUTURA BASE EM TYPESCRIPT
 CÃ“DIGO COMPLETO PARA COLAGEM EM VS CODE
 ===================================================== */

/* ========== tsconfig.json ========== */
{
  "compilerOptions": {
    "target": "ES2020",
    "module": "commonjs",
    "outDir": "dist",
    "rootDir": "src",
    "strict": true,
    "esModuleInterop": true,
    "resolveJsonModule": true,
    "forceConsistentCasingInFileNames": true
  }
}

/* ========== .env.example ========== */
PORT=3333
DATABASE_URL="postgresql://usuario:senha@localhost:5432/ekklesia"
JWT_SECRET="ekklesia_secret_key_2025"

/* ========== package.json ========== */
{
  "name": "ekklesia-backend",
  "version": "1.0.0",
  "main": "dist/index.js",
  "scripts": {
    "dev": "ts-node-dev --respawn src/index.ts",
    "build": "tsc",
    "start": "node dist/index.js"
  },
  "dependencies": {
    "@prisma/client": "^5.0.0",
    "bcryptjs": "^2.4.3",
    "cors": "^2.8.5",
    "dotenv": "^16.0.3",
    "express": "^4.18.2",
    "jsonwebtoken": "^9.0.0",
    "multer": "^1.4.5",
    "venom-bot": "^5.0.0"
  },
  "devDependencies": {
    "prisma": "^5.0.0",
    "ts-node-dev": "^2.0.0",
    "typescript": "^5.2.2"
  }
}

/* ========== tsconfig/estrutura de pastas ========== */
// Crie essa estrutura:

/ekklesia-backend
â”œâ”€â”€ src/
â”‚   â”œâ”€â”€ controllers/
â”‚   â”œâ”€â”€ routes/
â”‚   â”œâ”€â”€ middlewares/
â”‚   â”œâ”€â”€ utils/
â”‚   â”œâ”€â”€ jobs/
â”‚   â””â”€â”€ index.ts
â”œâ”€â”€ prisma/
â”‚   â””â”€â”€ schema.prisma
â”œâ”€â”€ uploads/
â”œâ”€â”€ recibos/
â”œâ”€â”€ .env
â”œâ”€â”€ tsconfig.json
â”œâ”€â”€ package.json

/* ========== prisma/schema.prisma ========== */
// Aqui vocÃª incluirÃ¡ todos os models: Usuario, Dizimo, Congregacao, Celula, etc.
// (Se quiser, te entrego tudo pronto aqui depois)

/* ========== src/index.ts ========== */
import express from 'express';
import cors from 'cors';
import dotenv from 'dotenv';
import path from 'path';

import usuarioRoutes from './routes/usuario.routes';
import congregacaoRoutes from './routes/congregacao.routes';
import dizimoRoutes from './routes/dizimo.routes';
import celulaRoutes from './routes/celula.routes';
import reuniaoRoutes from './routes/reuniao.routes';
import convertidoRoutes from './routes/convertido.routes';
import mensagemRoutes from './routes/mensagem.routes';
import relatorioRoutes from './routes/relatorio.routes';
import logRoutes from './routes/log.routes';
import notificacaoRoutes from './routes/notificacao.routes';

dotenv.config();
const app = express();

app.use(cors());
app.use(express.json());
app.use('/uploads', express.static(path.join(__dirname, '../uploads')));
app.use('/recibos', express.static(path.join(__dirname, '../recibos')));

// Rotas
app.use('/usuario', usuarioRoutes);
app.use('/congregacao', congregacaoRoutes);
app.use('/dizimo', dizimoRoutes);
app.use('/celula', celulaRoutes);
app.use('/reuniao', reuniaoRoutes);
app.use('/convertido', convertidoRoutes);
app.use('/mensagem', mensagemRoutes);
app.use('/relatorios', relatorioRoutes);
app.use('/logs', logRoutes);
app.use('/notificacoes', notificacaoRoutes);

const PORT = process.env.PORT || 3333;
app.listen(PORT, () => console.log(`ðŸš€ Servidor rodando na porta ${PORT}`));

/* ========== src/utils/jwt.ts ========== */
import jwt from 'jsonwebtoken';
const secret = process.env.JWT_SECRET || 'ekklesia_secret_key';
export function gerarToken(payload: any): string {
  return jwt.sign(payload, secret, { expiresIn: '4h' });
}
export function verificarToken(token: string): any {
  return jwt.verify(token, secret);
}

/* ========== src/middlewares/autorizaJWT.ts ========== */
import { Request, Response, NextFunction } from 'express';
import jwt from 'jsonwebtoken';
const secret = process.env.JWT_SECRET || 'ekklesia_secret_key';

export default function autorizaJWT(req: Request, res: Response, next: NextFunction) {
  const auth = req.headers.authorization;
  if (!auth) return res.status(401).json({ erro: 'Token ausente' });
  const token = auth.split(' ')[1];
  try {
    const payload = jwt.verify(token, secret);
    req.usuario = payload;
    next();
  } catch {
    return res.status(401).json({ erro: 'Token invÃ¡lido' });
  }
}

/* ========== src/jobs/whatsappBot.ts ========== */
import venom from 'venom-bot';
import axios from 'axios';

venom
  .create({
    session: 'ekklesiaBot',
    multidevice: true
  })
  .then((client) => start(client))
  .catch((err) => console.error(err));

async function start(client: any) {
  console.log('ðŸ“² Bot do WhatsApp conectado!');
  setInterval(async () => {
    try {
      const { data } = await axios.get('http://localhost:3333/notificacoes/pendentes');
      for (const not of data) {
        await client.sendText(not.destinatario, not.mensagem);
        await axios.put(`http://localhost:3333/notificacoes/${not.id}/enviar`);
        console.log(`âœ… Mensagem enviada para ${not.destinatario}`);
      }
    } catch (error: any) {
      console.error('Erro ao enviar notificaÃ§Ãµes:', error.message);
    }
  }, 60000);
}


/* =====================================================
ðŸ”¹ CONTINUAÃ‡ÃƒO â€” ARQUIVOS DO EKKLESIA BACKEND (TYPESCRIPT)
===================================================== */

/* ========== src/controllers/celula.controller.ts ========== */
import { Request, Response } from 'express';
import { PrismaClient } from '@prisma/client';
const prisma = new PrismaClient();

export const criarCelula = async (req: Request, res: Response) => {
  const { nome, tipo, lider, anfitriao, supervisao, congregacaoId } = req.body;
  const nova = await prisma.celula.create({
    data: {
      nome, tipo, lider, anfitriao, supervisao,
      congregacaoId: Number(congregacaoId)
    }
  });
  res.status(201).json(nova);
};

export const listarCelulas = async (_: Request, res: Response) => {
  const lista = await prisma.celula.findMany({ include: { reunioes: true } });
  res.json(lista);
};

export const buscarCelulaPorId = async (req: Request, res: Response) => {
  const celula = await prisma.celula.findUnique({
    where: { id: Number(req.params.id) },
    include: { reunioes: true }
  });
  if (!celula) return res.status(404).json({ erro: 'CÃ©lula nÃ£o encontrada.' });
  res.json(celula);
};

export const atualizarCelula = async (req: Request, res: Response) => {
  const atualizada = await prisma.celula.update({
    where: { id: Number(req.params.id) },
    data: req.body
  });
  res.json(atualizada);
};

export const deletarCelula = async (req: Request, res: Response) => {
  await prisma.celula.delete({ where: { id: Number(req.params.id) } });
  res.status(204).send();
};

/* ========== src/controllers/reuniao.controller.ts ========== */
import { Request, Response } from 'express';
import { PrismaClient } from '@prisma/client';
const prisma = new PrismaClient();

export const criarReuniao = async (req: Request, res: Response) => {
  const { data, tema, presencas, visitantes, celulaId } = req.body;
  const nova = await prisma.reuniao.create({
    data: {
      data: new Date(data),
      tema,
      presencas: Number(presencas),
      visitantes: Number(visitantes),
      celulaId: Number(celulaId)
    }
  });
  res.status(201).json(nova);
};

export const listarReunioes = async (_: Request, res: Response) => {
  const lista = await prisma.reuniao.findMany({ include: { celula: true } });
  res.json(lista);
};

/* ========== src/controllers/convertido.controller.ts ========== */
import { Request, Response } from 'express';
import { PrismaClient } from '@prisma/client';
const prisma = new PrismaClient();

export const cadastrarConvertido = async (req: Request, res: Response) => {
  const {
    nome, dataDecisao, localDecisao, status,
    discipulador, celular, observacoes, celulaId
  } = req.body;

  const novo = await prisma.novoConvertido.create({
    data: {
      nome,
      dataDecisao: new Date(dataDecisao),
      localDecisao,
      status,
      discipulador,
      celular,
      observacoes,
      celulaId: celulaId ? Number(celulaId) : null
    }
  });

  res.status(201).json(novo);
};

export const listarConvertidos = async (_: Request, res: Response) => {
  const lista = await prisma.novoConvertido.findMany({ include: { celula: true } });
  res.json(lista);
};

export const buscarPorId = async (req: Request, res: Response) => {
  const convertido = await prisma.novoConvertido.findUnique({
    where: { id: Number(req.params.id) },
    include: { celula: true }
  });
  if (!convertido) return res.status(404).json({ erro: 'Convertido nÃ£o encontrado.' });
  res.json(convertido);
};

export const atualizarConvertido = async (req: Request, res: Response) => {
  const atualizado = await prisma.novoConvertido.update({
    where: { id: Number(req.params.id) },
    data: req.body
  });
  res.json(atualizado);
};

export const deletarConvertido = async (req: Request, res: Response) => {
  await prisma.novoConvertido.delete({ where: { id: Number(req.params.id) } });
  res.status(204).send();
};

/* ========== src/controllers/mensagem.controller.ts ========== */
import { Request, Response } from 'express';
import { PrismaClient } from '@prisma/client';
const prisma = new PrismaClient();

export const criarMensagem = async (req: Request, res: Response) => {
  const { titulo, textoBase, tipo, publicoAlvo, estrutura, autor, congregacaoId } = req.body;
  const nova = await prisma.mensagemGerada.create({
    data: {
      titulo,
      textoBase,
      tipo,
      publicoAlvo,
      estrutura,
      autor,
      congregacaoId: Number(congregacaoId)
    }
  });
  res.status(201).json(nova);
};

export const listarMensagens = async (_: Request, res: Response) => {
  const lista = await prisma.mensagemGerada.findMany({ orderBy: { dataCriacao: 'desc' } });
  res.json(lista);
};

export const buscarPorId = async (req: Request, res: Response) => {
  const mensagem = await prisma.mensagemGerada.findUnique({
    where: { id: Number(req.params.id) }
  });
  if (!mensagem) return res.status(404).json({ erro: 'Mensagem nÃ£o encontrada.' });
  res.json(mensagem);
};

export const atualizarMensagem = async (req: Request, res: Response) => {
  const atualizada = await prisma.mensagemGerada.update({
    where: { id: Number(req.params.id) },
    data: req.body
  });
  res.json(atualizada);
};

export const deletarMensagem = async (req: Request, res: Response) => {
  await prisma.mensagemGerada.delete({ where: { id: Number(req.params.id) } });
  res.status(204).send();
};

/* ========== src/controllers/relatorio.controller.ts ========== */
import { Request, Response } from 'express';
import { PrismaClient } from '@prisma/client';
const prisma = new PrismaClient();

export const relatorioMensal = async (req: Request, res: Response) => {
  const { mes, ano, congregacaoId } = req.query;
  const inicio = new Date(`${ano}-${mes}-01`);
  const fim = new Date(`${ano}-${mes}-31`);

  const dados = await prisma.dizimo.findMany({
    where: {
      data: { gte: inicio, lte: fim },
      congregacaoId: congregacaoId ? Number(congregacaoId) : undefined
    }
  });

  const total = dados.reduce((acc, item) => acc + item.valor, 0);
  const media = dados.length ? total / dados.length : 0;

  res.json({
    mes, ano,
    totalDizimos: total.toFixed(2),
    quantidadeLancamentos: dados.length,
    valorMedio: media.toFixed(2)
  });
};

/* ========== src/controllers/log.controller.ts ========== */
import { Request, Response } from 'express';
import { PrismaClient } from '@prisma/client';
const prisma = new PrismaClient();

export const listarLogs = async (_: Request, res: Response) => {
  const logs = await prisma.logAcao.findMany({
    orderBy: { dataHora: 'desc' },
    include: { usuario: true }
  });
  res.json(logs);
};

/* ========== src/controllers/notificacao.controller.ts ========== */
import { Request, Response } from 'express';
import { PrismaClient } from '@prisma/client';
const prisma = new PrismaClient();

export const agendarNotificacao = async (req: Request, res: Response) => {
  const { tipo, destinatario, mensagem, dataEnvio, entidade, entidadeId } = req.body;
  const nova = await prisma.notificacaoAgendada.create({
    data: {
      tipo,
      destinatario,
      mensagem,
      dataEnvio: new Date(dataEnvio),
      entidade,
      entidadeId: entidadeId ? Number(entidadeId) : null
    }
  });
  res.status(201).json(nova);
};

export const listarPendentes = async (_: Request, res: Response) => {
  const agora = new Date();
  const pendentes = await prisma.notificacaoAgendada.findMany({
    where: { enviado: false, dataEnvio: { lte: agora } }
  });
  res.json(pendentes);
};

export const marcarComoEnviada = async (req: Request, res: Response) => {
  await prisma.notificacaoAgendada.update({
    where: { id: Number

(req.params.id) },
    data: { enviado: true } 

    });

    res.status(204).send();
    };

export const deletarNotificacao = async (req: Request, res: Response) => {
  await prisma.notificacaoAgendada.delete({
    where: { id: Number(req.params.id) }
  });   

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id      Int     @id @default(autoincrement())
  nome    String
  email   String  @unique
  senha   String
  perfil  String

  logs    LogAcao[]
  dizimos Dizimo[]
}

model Congregacao {
  id      Int     @id @default(autoincrement())
  nome    String
  cidade  String

  celulas   Celula[]
  dizimos   Dizimo[]
  mensagens MensagemGerada[]
}

model Dizimo {
  id            Int      @id @default(autoincrement())
  valor         Float
  data          DateTime @default(now())
  comprovanteUrl String

  usuarioId     Int
  congregacaoId Int

  usuario       Usuario     @relation(fields: [usuarioId], references: [id])
  congregacao   Congregacao @relation(fields: [congregacaoId], references: [id])
}

model Celula {
  id           Int       @id @default(autoincrement())
  nome         String
  tipo         String
  lider        String
  anfitriao    String
  supervisao   String
  congregacaoId Int

  congregacao  Congregacao   @relation(fields: [congregacaoId], references: [id])
  reunioes     Reuniao[]
  convertidos  NovoConvertido[]
}

model Reuniao {
  id         Int      @id @default(autoincrement())
  data       DateTime
  tema       String
  presencas  Int
  visitantes Int
  celulaId   Int

  celula     Celula   @relation(fields: [celulaId], references: [id])
}

model NovoConvertido {
  id            Int       @id @default(autoincrement())
  nome          String
  dataDecisao   DateTime
  localDecisao  String
  status        String    @default("em_discipulado")
  discipulador  String?
  celular       String?
  observacoes   String?

  celulaId      Int?
  celula        Celula?   @relation(fields: [celulaId], references: [id])
}

model MensagemGerada {
  id            Int       @id @default(autoincrement())
  titulo        String
  textoBase     String
  tipo          String     // culto ou cÃ©lula
  publicoAlvo   String
  estrutura     String
  autor         String
  dataCriacao   DateTime   @default(now())
  congregacaoId Int

  congregacao   Congregacao @relation(fields: [congregacaoId], references: [id])
}

model LogAcao {
  id         Int      @id @default(autoincrement())
  usuarioId  Int
  acao       String
  entidade   String
  entidadeId Int?
  dataHora   DateTime @default(now())

  usuario    Usuario @relation(fields: [usuarioId], references: [id])
}

model NotificacaoAgendada {
  id           Int      @id @default(autoincrement())
  tipo         String   // whatsapp, email, sms
  destinatario String
  mensagem     String
  dataEnvio    DateTime
  enviado      Boolean  @default(false)
  entidade     String?
  entidadeId   Int?
}


npx prisma generate
npx prisma migrate dev --name ekklesia-models